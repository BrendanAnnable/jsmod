// Kindly adapted from https://github.com/estools/estraverse/blob/1fd9dc6689bcd6fb4318feee0ab75a2a495159b7/estraverse.js
export const Types = {
  'AssignmentExpression': 'AssignmentExpression',
  'AssignmentPattern': 'AssignmentPattern',
  'ArrayExpression': 'ArrayExpression',
  'ArrayPattern': 'ArrayPattern',
  'ArrowFunctionExpression': 'ArrowFunctionExpression',
  'AwaitExpression': 'AwaitExpression',
  'BlockStatement': 'BlockStatement',
  'BinaryExpression': 'BinaryExpression',
  'BreakStatement': 'BreakStatement',
  'CallExpression': 'CallExpression',
  'CatchClause': 'CatchClause',
  'ClassBody': 'ClassBody',
  'ClassDeclaration': 'ClassDeclaration',
  'ClassExpression': 'ClassExpression',
  'ComprehensionBlock': 'ComprehensionBlock',
  'ComprehensionExpression': 'ComprehensionExpression',
  'ConditionalExpression': 'ConditionalExpression',
  'ContinueStatement': 'ContinueStatement',
  'DebuggerStatement': 'DebuggerStatement',
  'DirectiveStatement': 'DirectiveStatement',
  'DoWhileStatement': 'DoWhileStatement',
  'EmptyStatement': 'EmptyStatement',
  'ExportAllDeclaration': 'ExportAllDeclaration',
  'ExportDefaultDeclaration': 'ExportDefaultDeclaration',
  'ExportNamedDeclaration': 'ExportNamedDeclaration',
  'ExportSpecifier': 'ExportSpecifier',
  'ExpressionStatement': 'ExpressionStatement',
  'File': 'File',
  'ForStatement': 'ForStatement',
  'ForInStatement': 'ForInStatement',
  'ForOfStatement': 'ForOfStatement',
  'FunctionDeclaration': 'FunctionDeclaration',
  'FunctionExpression': 'FunctionExpression',
  'GeneratorExpression': 'GeneratorExpression',
  'Identifier': 'Identifier',
  'IfStatement': 'IfStatement',
  'ImportDeclaration': 'ImportDeclaration',
  'ImportDefaultSpecifier': 'ImportDefaultSpecifier',
  'ImportNamespaceSpecifier': 'ImportNamespaceSpecifier',
  'ImportSpecifier': 'ImportSpecifier',
  'Literal': 'Literal',
  'LabeledStatement': 'LabeledStatement',
  'LogicalExpression': 'LogicalExpression',
  'MemberExpression': 'MemberExpression',
  'MetaProperty': 'MetaProperty',
  'MethodDefinition': 'MethodDefinition',
  'ModuleSpecifier': 'ModuleSpecifier',
  'NewExpression': 'NewExpression',
  'ObjectExpression': 'ObjectExpression',
  'ObjectPattern': 'ObjectPattern',
  'Program': 'Program',
  'Project': 'Project',
  'Property': 'Property',
  'RestElement': 'RestElement',
  'ReturnStatement': 'ReturnStatement',
  'SequenceExpression': 'SequenceExpression',
  'SpreadElement': 'SpreadElement',
  'Super': 'Super',
  'SwitchStatement': 'SwitchStatement',
  'SwitchCase': 'SwitchCase',
  'TaggedTemplateExpression': 'TaggedTemplateExpression',
  'TemplateElement': 'TemplateElement',
  'TemplateLiteral': 'TemplateLiteral',
  'ThisExpression': 'ThisExpression',
  'ThrowStatement': 'ThrowStatement',
  'TryStatement': 'TryStatement',
  'UnaryExpression': 'UnaryExpression',
  'UpdateExpression': 'UpdateExpression',
  'VariableDeclaration': 'VariableDeclaration',
  'VariableDeclarator': 'VariableDeclarator',
  'WhileStatement': 'WhileStatement',
  'WithStatement': 'WithStatement',
  'YieldExpression': 'YieldExpression'
};

export const TypeProperties = {
  'AssignmentExpression': ['left', 'right'],
  'AssignmentPattern': ['left', 'right'],
  'ArrayExpression': ['elements'],
  'ArrayPattern': ['elements'],
  'ArrowFunctionExpression': ['params', 'body'],
  'AwaitExpression': ['argument'],
  'BlockStatement': ['body'],
  'BinaryExpression': ['left', 'right'],
  'BreakStatement': ['label'],
  'CallExpression': ['callee', 'arguments'],
  'CatchClause': ['param', 'body'],
  'ClassBody': ['body'],
  'ClassDeclaration': ['id', 'superClass', 'body'],
  'ClassExpression': ['id', 'superClass', 'body'],
  'ComprehensionBlock': ['left', 'right'],
  'ComprehensionExpression': ['blocks', 'filter', 'body'],
  'ConditionalExpression': ['test', 'consequent', 'alternate'],
  'ContinueStatement': ['label'],
  'DebuggerStatement': [],
  'DirectiveStatement': [],
  'DoWhileStatement': ['body', 'test'],
  'EmptyStatement': [],
  'ExportAllDeclaration': ['source'],
  'ExportDefaultDeclaration': ['declaration'],
  'ExportNamedDeclaration': ['declaration', 'specifiers', 'source'],
  'ExportSpecifier': ['exported', 'local'],
  'ExpressionStatement': ['expression'],
  'File': ['program'],
  'ForStatement': ['init', 'test', 'update', 'body'],
  'ForInStatement': ['left', 'right', 'body'],
  'ForOfStatement': ['left', 'right', 'body'],
  'FunctionDeclaration': ['id', 'params', 'body'],
  'FunctionExpression': ['id', 'params', 'body'],
  'GeneratorExpression': ['blocks', 'filter', 'body'],
  'Identifier': [],
  'IfStatement': ['test', 'consequent', 'alternate'],
  'ImportDeclaration': ['specifiers', 'source'],
  'ImportDefaultSpecifier': ['local'],
  'ImportNamespaceSpecifier': ['local'],
  'ImportSpecifier': ['imported', 'local'],
  'Literal': [],
  'LabeledStatement': ['label', 'body'],
  'LogicalExpression': ['left', 'right'],
  'MemberExpression': ['object', 'property'],
  'MetaProperty': ['meta', 'property'],
  'MethodDefinition': ['key', 'value'],
  'ModuleSpecifier': [],
  'NewExpression': ['callee', 'arguments'],
  'ObjectExpression': ['properties'],
  'ObjectPattern': ['properties'],
  'Program': ['body'],
  'Project': ['files'],
  'Property': ['key', 'value'],
  'RestElement': ['argument'],
  'ReturnStatement': ['argument'],
  'SequenceExpression': ['expressions'],
  'SpreadElement': ['argument'],
  'Super': [],
  'SwitchStatement': ['discriminant', 'cases'],
  'SwitchCase': ['test', 'consequent'],
  'TaggedTemplateExpression': ['tag', 'quasi'],
  'TemplateElement': [],
  'TemplateLiteral': ['quasis', 'expressions'],
  'ThisExpression': [],
  'ThrowStatement': ['argument'],
  'TryStatement': ['block', 'handler', 'finalizer'],
  'UnaryExpression': ['argument'],
  'UpdateExpression': ['argument'],
  'VariableDeclaration': ['declarations'],
  'VariableDeclarator': ['id', 'init'],
  'WhileStatement': ['test', 'body'],
  'WithStatement': ['object', 'body'],
  'YieldExpression': ['argument']
};

